[-] Type system
    [ ] Maybe
    [ ] 'a File
    [ ] "See through" types that act as an instance of their parameter
        [ ] () -> 'a
        [ ] 'a File
    [x] forall qualifier
    [-] Unification instead of typeIsEqual
        [ ] Operators that expect matching operands e.g. ++
    [ ] Allow (A -> forall b. b) to unify with (forall b. A -> b) -- and others?
    [ ] Row polymorphism
        - ('a | 'as) matches (A, B, C) for 'a = A and 'as = (B, C)
    [ ] Typeclasses/traits

[-] Language
    [-] Values
        [x] Integer
        [x] Number
        [x] Str
        [-] Lambda
            [ ] Arg type inference
            [x] Running
                - Duplicate the AST subtree for the expression, replace captured variables with literals
        [ ] Bracketed operators
        [ ] (String) format
        [ ] Regex
        [ ] Option (as in flags)
        -----
        [x] Tuple
            [ ] Parenless: low precedence comma operator?
        [x] List
        [ ] Records
        [ ] Dictionary
        -----
        [-] File
            [ ] Fix paths
                - Root spelled '-'
                - Home directories, '~'
            [ ] Quoted names
            [ ] Escapes?
        [ ] Directory (trailing /)
        [ ] FileListing (like ls -l)
        [-] Glob
            [x] *
            [ ] **
            [-] []
            [ ] {}
        [ ] URL
    [ ] Access to:
        [ ] Environment variables
        [ ] History
    [-] Expressions
        [ ] Arithmetic, + - * / %
        [ ] Comparison, == != < <= > >=
        [ ] Boolean, && || !
        [ ] Branching, if switch
        [ ] Files
            [ ] /
            [ ] |>
            [ ] |+> (different spelling? `append`?)
        [-] Function
            [-] Application
            [-] Pipe op
                - Right associative composition
                [ ] filter |?
                [ ] reduce
                [x] zipf |:
            [x] Explicit fn
            [ ] Named (optional?) arguments
            [-] Implicit conversions
                - fmap over:
                [x] Lists, ['a]
                [ ] Maybe, 'a?
                [ ] Generalize to all?
            [ ] Options
        [ ] String
            [ ] Formatting
        [-] Iterables
            [-] Concat, ++
                [ ] Strings
            [ ] Slices?
            [ ] Member-of
        [ ] Containers
            [ ] Lookup, :
    [ ] Statements
        [ ] File typing
        [-] Decl/assignment
            [ ] Expression level let
            [ ] A helpful error message to distinguish them
            [ ] Self reference error
        [ ] Functions
            [ ] Options
            [ ] Dependency functions
        [ ] if, while, for, switch
        [ ] Working directory control
            into <dir>: {}
            mk-into <dir>: {}
        [ ] Transactions (on the fs)
    [ ] Error handling
    [ ] Macros
    [ ] Modules

[-] Library
    [x] size :: File -> Int
        - Size
        - Exceptions? Return Maybe?
    [x] sum :: [Int] -> Int
        - Adapt for Number
    [x] zipf :: (File -> Int) -> File -> (Int, File)
        - Make polymorphic

[-] Interfacing with legacy Unix

[ ] C API

[ ] Unicode
    [ ] In the lexer
    [-] Other places e.g. strlen -> strwidth

[ ] Diagnostics
    [ ] Position information
    [ ] Colour
    [ ] Underlining
    [ ] Specific parsing issues
        [ ] Fn-app: refer to specific args

[-] UI
    [ ] Interactivity
        [ ] Completion
        [ ] Syntax highlighting
        [ ] Interactive command construction, extensible
        [ ] Job control
        [ ] Concurrent histories
    [ ] Display
        [-] Value printing
            [-] Highlighting
            [ ] Escape strings
            [ ] Long string truncation
    [-] Prompt
    [ ] Progress indicator

[ ] Pipeable, composable GUI
    
[ ] Backend
    [ ] JIT
    [ ] Compilation to POSIX shell

---------

[-] Gather todos
[ ] Minimize asserts !!!!
[ ] Multithreaded Boehm leaks (currently suppressed)
[ ] Uses of realloc (others?) in stdalloc taking fns
[ ] Pull bool fns from loops
[ ] Document the purpose of each module

== Containers

[ ] Add a fixed size array type

vector:
[ ] auto stored buffer hybrid?

hashmap:
[ ] Simplify impl.
[ ] tsearch and tsearch?
[ ] Args of const map* -> map
[ ] Change XXXAdd to XXXSet and make an XXXAdd that doesn't overwrite values

== Language structures

[ ] No {ast,sym}::children by default, allocate on need
[ ] Value printing must depend on the type

type:
[ ] Each type T contains a hashmap of fn types T -> K where K is the key. Use this to only allocate one of each fn type.
[ ] And for lists. Then generalize for any parametric type.
[-] Type equality
[x] Higher-kinded type printing

ast:
[ ] Make AST::children a const_vector (combined length and size fields)
[ ] Pooled allocator for AST
    - Substitute for malloc/free in debug
    - Custom allocators dangerous?
[ ] Unpackers for the AST (and others?)
[x] opKind -> str
[ ] Add a field to the AST, a reference to relevant token

sym:
[ ] Change sym::children to a hashmap

value:
[x] valueInvalid
[ ] Make it a value type?
[ ] Minimize GetVector usage
[ ] Get rid of File

== Passes

[ ] For all AST passes (inc. ast-printer) create an "action table" which the parser can run directly without even creating an AST.
    - For most cases (all?) an AST is not actually needed.
    - Parser routines will return an "action result".
    - The runner actions will need to call the analyzer actions before themselves

Lexer:
[ ] Make the lexer create a vector of tokens which persist, own their buffers
[ ] Put location info in tokens
[ ] Lexer op classes
[ ] Keyword / op trie

Analyzer:
[x] Each analyzer routine returns type, handler assigns
[ ] ListLit: check element equality

Runner:
[ ] Optimization for calling n-ary valueFns (creating curried values)
